"""
Bot de Telegram simple para buscar subastas en eBay
"""
import logging
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from scraper import EbayScraper
from config import Config

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ebay_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# Solo debug para nuestro scraper
logging.getLogger('scraper').setLevel(logging.DEBUG)
logger = logging.getLogger(__name__)

# Estados de conversaci√≥n
WAITING_SEARCH = 1

class EbayBot:
    def __init__(self):
        self.config = Config.load()
        self.scraper = EbayScraper(self.config)
        
        if not self.config.validate():
            raise ValueError("Configuraci√≥n inv√°lida")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        welcome_message = (
            "ü§ñ *¬°Hola! Soy tu bot de subastas de eBay*\n\n"
            "Comandos disponibles:\n"
            "‚Ä¢ /buscar - Buscar subastas por t√©rmino\n"
            "‚Ä¢ /help - Ver esta ayuda\n\n"
            "¬°Empez√° con /buscar para encontrar ofertas!"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        help_message = (
            "üîç *C√≥mo usar el bot:*\n\n"
            "1. Usa /buscar\n"
            "2. Escribe lo que quer√©s buscar (ej: 'macbook pro')\n"
            "3. Te muestro las 10 subastas que terminan m√°s pronto\n\n"
            "*Ejemplos de b√∫squeda:*\n"
            "‚Ä¢ macbook\n"
            "‚Ä¢ thinkpad t480\n"
            "‚Ä¢ gaming laptop\n"
            "‚Ä¢ dell xps\n\n"
            "üí° *Tip:* S√© espec√≠fico para mejores resultados"
        )
        
        await update.message.reply_text(
            help_message,
            parse_mode='Markdown'
        )

    async def buscar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /buscar - inicia b√∫squeda"""
        await update.message.reply_text(
            "üîç *¬øQu√© quer√©s buscar en eBay?*\n\n"
            "Escrib√≠ el t√©rmino de b√∫squeda (ej: 'macbook pro', 'thinkpad', etc.)\n"
            "o /cancel para cancelar",
            parse_mode='Markdown'
        )
        return WAITING_SEARCH

    async def handle_search_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar el t√©rmino de b√∫squeda del usuario"""
        query = update.message.text.strip()
        
        if not query:
            await update.message.reply_text("‚ùå Por favor escribe algo para buscar")
            return WAITING_SEARCH
        
        # Mostrar mensaje de b√∫squeda
        search_msg = await update.message.reply_text(
            f"üîç Buscando '{query}' en eBay...\n"
            "‚è≥ Esto puede tomar unos segundos..."
        )
        
        try:
            # Buscar subastas
            auctions = self.scraper.search_auctions(query)
            
            if not auctions:
                await search_msg.edit_text(
                    f"üòî No encontr√© subastas activas para '{query}'\n\n"
                    "üí° *Intent√° con:*\n"
                    "‚Ä¢ T√©rminos m√°s generales\n"
                    "‚Ä¢ Menos palabras\n"
                    "‚Ä¢ Diferentes marcas\n\n"
                    "Us√° /buscar para intentar de nuevo"
                )
                return ConversationHandler.END
            
            # Ordenar por tiempo restante (las que terminan primero)
            auctions_sorted = sorted(auctions, key=lambda x: x.get('time_remaining_hours', 999))
            top_10 = auctions_sorted[:10]
            
            # Formatear resultados
            await search_msg.edit_text(f"‚úÖ Encontr√© {len(auctions)} subastas para '{query}'")
            
            # Enviar cada subasta
            for i, auction in enumerate(top_10, 1):
                message = self.format_auction_message(auction, i)
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
            # Mensaje final
            await update.message.reply_text(
                f"üéØ *Mostrando las {len(top_10)} subastas que terminan m√°s pronto*\n\n"
                "Us√° /buscar para hacer otra b√∫squeda"
            )
                
        except Exception as e:
            logger.error(f"Error en b√∫squeda: {e}")
            await search_msg.edit_text(
                f"‚ùå Error buscando '{query}'\n\n"
                "Puede ser que eBay est√© bloqueando las consultas.\n"
                "Intent√° de nuevo en unos minutos.\n\n"
                "Us√° /buscar para reintentar"
            )
        
        return ConversationHandler.END

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancelar operaci√≥n actual"""
        await update.message.reply_text(
            "‚ùå B√∫squeda cancelada\n\n"
            "Us√° /buscar cuando quieras buscar algo"
        )
        return ConversationHandler.END

    def format_auction_message(self, auction: dict, position: int) -> str:
        """Formatear mensaje de subasta"""
        title = auction.get('title', 'Sin t√≠tulo')
        if len(title) > 60:
            title = title[:60] + "..."
        
        current_price = auction.get('current_price', 0)
        bids = auction.get('bids', 0)
        time_remaining = auction.get('time_remaining', 'N/A')
        url = auction.get('url', '')
        
        message = (
            f"*{position}. {title}*\n\n"
            f"üí∞ *Precio actual:* ${current_price:,.2f}\n"
            f"üî® *Pujas:* {bids}\n"
            f"‚è∞ *Termina en:* {time_remaining}\n"
        )
        
        # Agregar marca si est√° disponible
        brand = auction.get('brand')
        if brand:
            message += f"üè¢ *Marca:* {brand}\n"
        
        # Agregar enlace
        if url:
            message += f"\nüîó [Ver en eBay]({url})"
        
        return message

    def run(self):
        """Ejecutar el bot"""
        # Crear aplicaci√≥n
        application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN).build()
        
        # Configurar conversation handler para b√∫squeda
        search_handler = ConversationHandler(
            entry_points=[CommandHandler('buscar', self.buscar_command)],
            states={
                WAITING_SEARCH: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_search_query),
                    CommandHandler('cancel', self.cancel_command)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel_command)]
        )
        
        # Agregar handlers
        application.add_handler(CommandHandler('start', self.start_command))
        application.add_handler(CommandHandler('help', self.help_command))
        application.add_handler(search_handler)
        
        # Iniciar bot
        logger.info("üöÄ Bot iniciado. Presiona Ctrl+C para parar.")
        application.run_polling()

def main():
    """Funci√≥n principal"""
    try:
        bot = EbayBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("Bot detenido por usuario")
    except Exception as e:
        logger.error(f"Error ejecutando bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()